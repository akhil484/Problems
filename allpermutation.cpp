#include<bits/stdc++.h>
using namespace std;

bool palindrom(string str, int l, int r)
{
	while(l<r)
	{
		if(str[l]!=str[r])
			return false;
		l++;
		r--;
	}
	return true;
}
void allPalPartUtil(vector<vector<string> >&allPart, vector<string> &currPart,  
                   int start, int n, string str)
{
	if(start>=n)
	{
		allPart.push_back(currPart);
		return;
	}
	for(int i=start;i<n;i++)
	{
		if(palindrom(str,start,i))
		{
			currPart.push_back(str.substr(start,i-start+1));
			allPalPartUtil(allPart,currPart,i+1,n,str);
			currPart.pop_back();
		}
	}
}

void allPalPartitions(string str)
{
	    int n = str.length(); 
  
    // To Store all palindromic partitions 
    vector<vector<string> > allPart; 
  
    // To store current palindromic partition 
    vector<string> currPart;  
  
    // Call recursive function to generate all partiions 
    // and store in allPart 
    allPalPartUtil(allPart, currPart, 0, n, str); 
  
    // Print all partitions generated by above call 
    for (int i=0; i< allPart.size(); i++ ) 
    { 
        for (int j=0; j<allPart[i].size(); j++) 
            cout << allPart[i][j] << " "; 
        cout << "\n"; 
    }
}


int main()
{
	string str = "nitin"; 
    allPalPartitions(str); 
    return 0;
}